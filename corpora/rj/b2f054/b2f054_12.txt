	For years, students have been challenged academically within a wide variety of core subjects that the United States considers vital to their education. When students think of one of the most challenging fields they will encounter it is often mathematics. Yet, with the advancement of computer science over the past few decades alongside a degrading barrier of entry, computer science may in fact be yet another field that will soon be considered core for all students. Computer science students in the university environment may also question exactly why they need calculus to become programmers, the branch of mathematics that is arguably mandatory in every computer science course load. E.W. Dijkstra, a famous computer scientist and mathematician believed that programming should be taught as a branch of mathematics altogether. While many programmers often feel they do not use math much within their daily tasks, it’s fair to say that the two are interchangeably important regardless of daily usage. This is primarily due to their unique set of skills they develop. In the case of calculus, it’s not only useful, but practical branch of mathematics that is vital to many essential parts of computer science.
It’s no coincidence various branches within calculus correlate well to various branches in computer science. Multivariable calculus for example is one of the prime examples of practicality in computer science, in using differentiation for machine learning, an area focusing on pattern recognition, one can extrapolate according to data accordingly and minimize error to yield results desirable to the user without having to sift through massive amounts of information. In vector calculus, a programmer can utilize 3-dimensional planes for use in games, modelling, and graphing. According to Dijkstra’s idea, it should be reasonable to see his stance, especially when computer science itself is based on math. Computers simply could not work without binary math and it’s important to acknowledge them as an extension of mathematics themselves. For students, the question shouldn’t necessarily be “Why are we learning this?” in regards to math, but rather understanding one is essentially a smaller part to the other. Calculus is especially vital to computer science majors as is noticed in the examples above, hence why it’s a requirement. However, with computer science being such a broad field, sometimes without programming or machine learning entirely, calculus may still be irrelevant in practical usage in the working environment.

This type of thought process isn’t exclusive to just computer science however, it’s beneficial to almost any field. The need for logistical and critical thinking is ever important in the information economy.
In a way, learning mathematics beyond basic requirements also draws upon student’s marketability. Students should then be pushed to learn not only computer science concepts but mathematical ones as well, to increase their capabilities and marketability. Of course, the student will inevitably specialize in a specific area of their field, but it’s ideal to be flexible for any organization’s needs and meeting these needs is necessarily what defines employment altogether. It is no longer about learning and mastering one aspect of mathematics or computer science. Rather, it is mastering various nuanced and incredibly challenging aspects required to meet the demands of tomorrow’s problems.
